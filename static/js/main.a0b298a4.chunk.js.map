{"version":3,"sources":["util.js","InfoBox.js","Map.js","Table.js","Linegraph.js","App.js","serviceWorker.js","index.js"],"names":["casesTypeColors","cases","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","pathOptions","color","fillColor","fillOpacity","radius","Math","sqrt","Popup","className","style","backgroundImage","flag","InfoBox","title","total","active","props","Card","isCases","isRecovered","isDeaths","onClick","CardContent","Typography","Map","countries","zoom","ChangeView","useMap","setView","MapContainer","scrollWheelZoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","Linegraph","useState","setData","useEffect","fetch","then","response","json","chartedData","dataFetch","marginTop","length","datasets","backgroundColor","borderColor","App","setCountries","countryValue","setCountryValue","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","mapZoom","setMapZoom","setCasesType","mapCountries","setMapCountries","name","iso2","sortedData","getCountries","handleCountryCode","event","countryCode","target","exact","path","FormControl","Select","variant","onChange","MenuItem","todayCases","e","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a0b298a4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n    //   rgb: \"rgb(204, 16, 52)\",\r\n    //   half_op: \"rgba(204, 16, 52, 0.5)\",\r\n      multiplier: 200,\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n    //   rgb: \"rgb(125, 215, 29)\",\r\n    //   half_op: \"rgba(125, 215, 29, 0.5)\",\r\n      multiplier: 300,\r\n    },\r\n    deaths: {\r\n      hex: \"#808080\",\r\n    //   rgb: \"rgb(251, 68, 67)\",\r\n    //   half_op: \"rgba(251, 68, 67, 0.5)\",\r\n      multiplier: 1000,\r\n    },\r\n  };\r\n\r\nexport const sortData = (data) =>{\r\n    const sortedData = [...data];\r\n    return sortedData.sort((a,b) =>(a.cases > b.cases)?-1:1);\r\n}\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      pathOptions={{\r\n        color: casesTypeColors[casesType].hex,\r\n        fillColor: casesTypeColors[casesType].hex,\r\n      }}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));","import React from 'react';\r\nimport {Card,CardContent, Typography} from \"@material-ui/core\";\r\nimport './InfoBox.css';\r\nimport { prettyPrintStat } from './util';\r\n\r\nfunction InfoBox({title,cases,total,active,...props}) {\r\n    return (\r\n        <Card className={`infoBox ${active && props.isCases && \"infoBox--isCases\"} \r\n                                  ${active && props.isRecovered && \"infoBox--isRecovered\"}\r\n                                  ${active && props.isDeaths && \"infoBox--isDeaths\"}`} onClick={props.onClick}>\r\n            <CardContent>\r\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">{title}</Typography>\r\n                <h2 className={`infoBox__cases ${props.isCases && \"infoBox--isCasesColor\"} \r\n                                  ${props.isRecovered && \"infoBox--isRecoveredColor\"}\r\n                                  ${props.isDeaths && \"infoBox--isDeathsColor\"}`}>{prettyPrintStat(cases)}</h2>\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">{prettyPrintStat(total)}Total</Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react';\r\nimport { MapContainer, TileLayer, useMap } from 'react-leaflet';\r\nimport './Map.css';\r\nimport { mapDataCountries, showDataOnMap } from './util';\r\n\r\nfunction Map({casesType, countries,center, zoom}) {\r\n\r\n    function ChangeView({ center, zoom }) {\r\n        const map = useMap();\r\n        map.setView(center, zoom);\r\n        return null;\r\n      }\r\n    return (\r\n        <div className=\"map\">\r\n            <MapContainer className=\"map-container\" casesType={casesType} center={center} zoom={zoom} scrollWheelZoom={false}>\r\n            <ChangeView center={center} zoom={zoom} />\r\n                <TileLayer \r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'/>\r\n                {/* {console.log(casesType)} */}\r\n                {showDataOnMap(countries, casesType)};\r\n            </MapContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map;","import numeral from 'numeral';\r\nimport React from 'react';\r\nimport './Table.css';\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {\r\n                countries.map((country)=>(\r\n                    <tr>\r\n                        <td>{country.country}</td>\r\n                        <td>{numeral(country.cases).format(\"0,0\")}</td>\r\n                    </tr>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import numeral from 'numeral';\r\nimport React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2'; \r\n\r\nconst options = {\r\n    legend: {\r\n      display: false,\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 0,\r\n      },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n      mode: \"index\",\r\n      intersect: false,\r\n      callbacks: {\r\n        label: function (tooltipItem, data) {\r\n          return numeral(tooltipItem.value).format(\"+0,0\");\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          type: \"time\",\r\n          time: {\r\n            format: \"MM/DD/YY\",\r\n            tooltipFormat: \"ll\",\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          gridLines: {\r\n            display: false,\r\n          },\r\n          ticks: {\r\n            // Include a dollar sign in the ticks\r\n            callback: function (value, index, values) {\r\n              return numeral(value).format(\"0a\");\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  const buildChartData = (data,casesType)=> {\r\n    const chartData =[];\r\n    let lastDataPoint;\r\n    for(let date in data.cases){\r\n        if(lastDataPoint){\r\n            let newDataPoint = {\r\n                x : date,\r\n                y : data[casesType][date] - [lastDataPoint]\r\n            }\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date]\r\n    }\r\n    return chartData;\r\n} \r\n\r\nfunction Linegraph({casesType = \"cases\"}) {\r\n    const [data, setData] = useState({});\r\n\r\n    //https://disease.sh/v3/covid-19/historical/all?lastdays=120\r\n\r\n    useEffect(()=>{\r\n        const dataFetch = async ()=> {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n                    .then(response => response.json())\r\n                    .then(data => {\r\n            let chartedData = buildChartData(data,casesType);\r\n            setData(chartedData);\r\n        })}\r\n        dataFetch();\r\n    },[casesType]);\r\n\r\n    const selectedColor = {\r\n      cases:\"#CC1034\",\r\n      recovered:\"#7dd71d\",\r\n      deaths:\"#fb4443\"\r\n    }\r\n    return (\r\n        <div>\r\n        <h3 style={{marginTop : \"30px\"}}>Worldwide new {casesType}</h3> \r\n        {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: selectedColor[casesType],\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Linegraph\r\n","import React, { useState, useEffect } from 'react';\nimport { FormControl,Select, MenuItem, Card, CardContent } from '@material-ui/core';\nimport './App.css';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData } from './util';\nimport Linegraph from './Linegraph';\nimport 'leaflet/dist/leaflet.css';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\n\nfunction App() {\n\n  const [countries,setCountries] = useState([]);\n  const [countryValue, setCountryValue] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState([20,77]);\n  const [mapZoom, setMapZoom] = useState(3);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCountries, setMapCountries] = useState([]);\n\n\n  useEffect(()=>{\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data =>{setCountryInfo(data)})\n  },[]);\n\n  useEffect(()=>{\n    const getCountries = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n            .then(response => response.json())\n            .then(data => { const country = data.map((data) => ({ name:data.country,\n                                                                  value:data.countryInfo.iso2 }))\n                            setCountries(country);\n                            setMapCountries(data);\n                            const sortedData = sortData(data);\n                            setTableData(sortedData);\n                          })\n    }\n    getCountries();\n  },[]);\n\n  const handleCountryCode = async (event) => {\n    const countryCode = event.target.value;\n    setCountryValue(countryCode); \n\n    //https://disease.sh/v3/covid-19/countries/[countryCode]\n    //https://disease.sh/v3/covid-19/all\n\n    const url = (countryCode === 'worldwide')? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n          .then(response => response.json())\n          .then(data => {\n            setCountryValue(countryCode);\n            setCountryInfo(data);\n            setMapCenter([data.countryInfo.lat,data.countryInfo.long]);\n            setMapZoom(4)\n          })\n\n  }\n\n  return (\n    <div className=\"app\">\n      <BrowserRouter>\n      <Route exact path=\"/covid19\">\n      <div className=\"app__left\">  \n      {/** Header */}\n      <div className=\"app__header\">\n        <div className=\"app__heading\"><h1>Covid19 Tracker</h1></div>\n            <FormControl className=\"app__dropdown\">\n              <Select variant=\"outlined\" value={countryValue} onChange={handleCountryCode}>\n                 <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                 {countries.map((country,index) =><MenuItem key={index} value={country.value}>{country.name}</MenuItem>)}\n              </Select>\n            </FormControl>\n      </div>\n      <div className=\"app__stats\">\n        {/** InfoBox */}\n        <InfoBox title=\"Cases\" cases={countryInfo.todayCases} total={countryInfo.cases} onClick={(e)=>setCasesType(\"cases\")}\n                 active={casesType === \"cases\"} isCases/>  \n        {/** InfoBox */}\n        <InfoBox title=\"Recovered\" cases={countryInfo.todayRecovered} total={countryInfo.recovered} onClick={(e)=>setCasesType(\"recovered\")}\n                 active={casesType === \"recovered\"} isRecovered/>  \n        {/** InfoBox */}\n        <InfoBox title=\"Deaths\" cases={countryInfo.todayDeaths} total={countryInfo.deaths} onClick={(e)=>setCasesType(\"deaths\")}\n                 active={casesType === \"deaths\"} isDeaths/>\n      </div>\n        {/** Map */}\n        <Map casesType={casesType} countries={mapCountries}  center={mapCenter} zoom={mapZoom} />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Total Cases by Countries</h3>\n        {/** Table */}\n        <Table countries={tableData}/>\n        {/** Graph */}\n        <Linegraph casesType={casesType}/>\n        </CardContent>\n      </Card>\n      </Route>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}